# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet pry "binding.pry"
binding.pry
endsnippet

snippet irb "binding.irb"
binding.irb
endsnippet

snippet rb "#!/usr/bin/env ruby -wKU"
#!/usr/bin/env ruby -wKU

endsnippet

snippet testcla "Make test class"
# frozen_string_literal: true

require "test_helper"

class ${1:`!v substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ActiveSupport::TestCase
	test "${2:test_name}" do
		$0
	end
end
endsnippet

snippet testclai "Make test class"
# frozen_string_literal: true

require "test_helper"

class ${1:`!v substitute(vim_snippets#Filename(), '\(_\|^\)\(.\)', '\u\2', 'g')`} < ActionDispatch::IntegrationTest
	test "${2:test_name}" do
		$0
	end
end
endsnippet

snippet in "include Module .."
include ${1:Module}

$0
endsnippet

snippet pr "Start private section .."

private

$0
endsnippet

snippet are "Test Assert Response (are)"
assert_response :${1:success}
endsnippet
